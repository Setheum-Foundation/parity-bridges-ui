{"version":3,"sources":["actions/accountActions.ts","components/TopBar.tsx","reducers/accountReducer.ts","contexts/AccountContextProvider.tsx","util/envVariablesValidations.ts","configs/substrateCustomTypes/index.ts","configs/substrateProviders.ts","constants.ts","util/logger.ts","actions/sourceTargetActions.ts","reducers/sourceTargetReducer.ts","contexts/SourceTargetContextProvider.tsx","contexts/ApiPromiseContextProvider.tsx","contexts/ApiPromiseSourceContext.tsx","contexts/ApiPromiseTargetContext.tsx","types/keyringTypes.ts","contexts/KeyringContextProvider.tsx","actions/transactionActions.ts","reducers/transactionReducer.ts","contexts/TransactionContext.tsx","util/getDeriveAccount.ts","hooks/useDerivedAccount.ts","hooks/useAccounts.ts","components/Accounts.tsx","hooks/useBlocksInfo.ts","util/getPalletNames.ts","hooks/useBridgedBlocks.ts","hooks/useMessagesLane.ts","hooks/useLaneId.ts","hooks/useDashboard.ts","components/DashboardCard.tsx","hooks/useDashboardProfile.ts","hooks/useLoadingApi.ts","types/transactionTypes.ts","hooks/useTransactionPreparation.ts","hooks/useTransactionType.ts","hooks/useSendMessage.ts","components/Remark.tsx","util/getReceiverAddress.ts","components/Transfer.tsx","hooks/useConnectedReceiver.ts","screens/Main.tsx","App.tsx","index.tsx"],"names":["AccountActionsTypes","TopBar","Menu","pointing","secondary","Item","AccountActionCreators","account","payload","type","SET_ACCOUNT","accountReducer","state","action","Error","AccountContext","React","createContext","UpdateAccountContext","useAccountContext","useContext","AccountContextProvider","props","children","useReducer","dispatchAccount","Provider","value","expectedVariables","checkEnvVariable","variable","envVariable","process","hasherH512","data","u8aConcat","blake2AsU8a","keccakAsU8a","getChainNames","CHAIN_1","CHAIN_2","getTypeAndHasher","chainNumber","chain","hasher","types","customTypesMillau","customTypesRialto","getCustomTypesAndHasher","createConfigObject","provider","SS58Format","parseInt","bridgeId","WsProvider","getChainConfigs","chain1","chain2","SOURCE","TARGET","winston","addColors","debug","error","info","warn","SourceTargetActionsTypes","myformat","format","cli","all","logger","createLogger","transports","Console","SourceTargetActionsCreators","SWAP_CHAINS","sourceTargetReducer","sourceChain","targetChain","SourceTargetContext","useSourceTarget","UpdateSourceTargetContext","SourceTargetContextProvider","currentSourceTarget","dispatchChangeSourceTarget","registry","TypeRegistry","ApiPromiseContextProvider","ApiPromiseContext","contextType","sourceTarget","options","useState","ApiPromise","apiPromise","setApiPromise","isReady","setIsReady","useEffect","then","register","catch","e","api","isApiReady","ApiPromiseSourceContext","useApiSourcePromiseContext","ApiPromiseSourceContextProvider","ApiPromiseTargetContext","useApiTargetPromiseContext","ApiPromiseTargetContextProvider","KeyringStatuses","TransactionActionTypes","KeyringContext","KeyringContextProvider","sourceChainSS58Format","INIT","keyringStatus","setKeyringStatus","keyringPairs","setKeyringPairs","keyringPairsReady","setkeyringPairsReady","isDevelopment","Boolean","loadAccounts","useCallback","asyncLoadAccounts","a","LOADING","web3Enable","web3Accounts","allAccounts","map","address","meta","name","source","keyring","loadAll","ss58Format","READY","ERROR","keyringOptions","getPairs","TransactionActionCreators","estimatedFee","SET_ESTIMATED_FEE","receiverAddress","SET_RECEIVER_ADDRESS","transactionReducer","TransactionContext","UpdateTransactionContext","useTransactionContext","useUpdateTransactionContext","TransactionContextProvider","transaction","dispatchTransaction","getDeriveAccount","input","compactAddLength","stringToU8a","decodeAddress","encodeAddress","blake2AsHex","Uint8Array","from","useDerivedAccount","chainsConfigs","getDerivedAccount","useAccounts","accounts","setAccounts","derivedAccount","length","setCurrentAccount","find","formatOptions","icon","key","text","toLocaleUpperCase","styled","className","Container","Dropdown","onChange","evt","placeholder","fluid","selection","useBlocksInfo","bestBlock","setBestBlock","bestBlockFinalized","setBestBlockFinalized","derive","bestNumber","res","toString","unsub","unsubscribeBestNumber","bestNumberFinalized","unsubscribeBestNumberFinalized","getPalletNames","bridgedGrandpaChain","bridgedMessages","useBridgedBlocks","importedHeaders","setImportedHeaders","unsubBestFinalized","unsubImportedHeaders","query","bestFinalized","bestBridgedFinalizedBlock","toJSON","number","useMessageLane","pendingMessages","totalMessages","outboundLanes","setOutboudLanes","bridgeReceivedMessages","inboundLanes","setInboudLanes","laneId","unsubscribeOutboundLanes","unsubscribeInboundLanes","latest_generated_nonce","get","toNumber","useDashboard","destination","local","useApiContext","blockInfo","bridgedBlocks","messagesLane","useMessagesLane","chainType","profile","setProfile","useDashboardProfile","headerText","Card","Content","header","Description","useLoadingApi","isSourceApiReady","isTargetApiReady","areReady","setAreReady","TransactionTypes","useTransactionPreparation","areApiReady","sourceApi","setPayload","targetApi","callFunction","infoFunction","transactionFunction","setTransactionFunction","REMARK","tx","system","remark","paymentInfo","TRANSFER","balances","transfer","useTransactionType","payloadType","createType","messageFeeType","lane_id","u8aToHex","toU8a","rpc","call","estimatedFeeCall","estimatedFeeType","calculateFee","transferInfo","weight","transferCall","origin","SourceAccount","addressRaw","spec_version","getPayload","useSendMessage","isRunning","setIsRunning","setExecutionStatus","message","isButtonDisabled","sendLaneMessage","bridgeMessage","sendMessage","nonce","sourceAccount","isInjected","web3FromSource","injector","signer","signAndSend","successfull","remarkInput","setRemarkInput","executionStatus","Input","event","target","Button","disabled","onClick","getReceiverAddress","checkAddress","validatedDerivedAcccount","transferInput","setTransferInput","receiverInput","setReceiverInput","receiverMessage","setReceiverMessage","setConnectedReceiver","receiver","useConnectedReceiver","Grid","Row","Column","areApiLoading","width","Icon","fitted","Dimmer","active","Loader","App","path","v","checkExpectedVariables","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6vNAkBKA,E,6ECOUC,EANA,kBACb,cAACC,EAAA,EAAD,CAAMC,UAAQ,EAACC,WAAS,EAAxB,SACE,cAACF,EAAA,EAAKG,KAAN,sB,yBDHCL,K,2BAAAA,M,KAIL,IAKMM,EALa,SAACC,GAAD,MAAuB,CACxCC,QAAS,CAAED,WACXE,KAAMT,EAAoBU,cELb,SAASC,EAAeC,EAAqBC,GAC1D,OAAQA,EAAOJ,MACb,KAAKT,EAAoBU,YACvB,OAAO,2BAAKE,GAAZ,IAAmBL,QAASM,EAAOL,QAAQD,UAE7C,QACE,MAAM,IAAIO,MAAJ,wBAA2BD,EAAOJ,QCIvC,IAAMM,EAAoDC,IAAMC,cAAc,IAExEC,EAA4DF,IAAMC,cAC7E,IAGK,SAASE,IACd,OAAOC,qBAAWL,GAOb,SAASM,EAAuBC,GAAyD,IAAD,EACjEA,EAApBC,gBADqF,MAC1E,KAD0E,IAG1DC,qBAAWb,EAAgB,CAAEJ,QAAS,OAHoB,mBAGtFA,EAHsF,KAG7EkB,EAH6E,KAK7F,OACE,cAACV,EAAeW,SAAhB,CAAyBC,MAAOpB,EAAhC,SACE,cAACW,EAAqBQ,SAAtB,CAA+BC,MAAO,CAAEF,mBAAxC,SAA4DF,M,8BClC5DK,EAAoB,CACxB,oBACA,oBACA,uCACA,uCACA,oBACA,sCACA,gCACA,gCACA,8BACA,+BAYIC,EAAmB,SAACC,GACxB,IAAMC,EAAcC,skBAAYF,GAChC,IAAKC,EACH,MAAM,IAAIjB,MAAJ,uBAA0BgB,EAA1B,qBAER,OAAOC,G,2CCrBT,SAASE,EAAWC,GAClB,OAAOC,YAAUC,YAAYF,GAAOG,YAAYH,IAGlD,ICWMI,EAAgB,WACpB,MAAO,CAACT,EAAiB,qBAAsBA,EAAiB,uB,EAGhCS,I,mBAApBC,E,KAASC,E,KAIjBC,EAAmB,SAACC,GAAD,ODnBO,SAACC,GAC/B,OAAQA,GACN,IAAK,SACH,MAAO,CAAEC,OAAQX,EAAYY,MAAOC,GACtC,IAAK,SACH,MAAO,CAAED,MAAOE,GAClB,QACE,MAAM,IAAIjC,MAAJ,yBAA4B6B,KCatCK,CAAwBnB,EAAiB,mBAAD,OAAoBa,MAExDO,EAAqB,SAACP,GAAyB,IALhCQ,EAK+B,EACxBT,EAAiBC,GAAnCG,EAD0C,EAC1CA,MAAOD,EADmC,EACnCA,OACf,MAAO,CACLO,WAAYC,SAASvB,EAAiB,+BAAD,OAAgCa,KACrEW,SAAUxB,EAAiB,6BAAD,OAA8Ba,IACxDE,SACAM,UAXiBA,EAWKrB,EAAiB,sCAAD,OAAuCa,IAXvC,IAAIY,IAAWJ,IAYrDL,UAISU,EAAkB,WAAqB,IAAD,IACxBjB,IADwB,mBAC1CkB,EAD0C,KAClCC,EADkC,KAOjD,OALa,mBACVD,EAASP,EAAmB,MADlB,cAEVQ,EAASR,EAAmB,MAFlB,GC7CFS,EAAS,cACTC,EAAS,c,oCCAtBC,IAAQC,UAAU,CAChBC,MAAO,OACPC,MAAO,MACPC,KAAM,QACNC,KAAM,SAGR,ICRKC,EDQCC,EAAWP,IAAQQ,OAAOC,IAAI,CAClCC,KAAK,IAWQC,EARAX,IAAQY,aAAa,CAClCC,WAAY,CACV,IAAIb,IAAQa,WAAWC,QAAQ,CAC7BN,OAAQD,Q,SCfTD,K,2BAAAA,M,KAIL,IAIMS,EAJe,iBAAO,CAC1BlE,KAAMyD,EAAyBU,cCFlB,SAASC,EAAoBjE,EAAqBC,GAC/D,OAAQA,EAAOJ,MACb,KAAKyD,EAAyBU,YAC5B,OAAO,2BAAKhE,GAAZ,IAAmBkE,YAAalE,EAAMmE,YAAaA,YAAanE,EAAMkE,cAExE,QACE,MAAM,IAAIhE,MAAJ,0BAA6BD,EAAOJ,QCKzC,IAAMuE,EAAmDhE,IAAMC,cAAc,IAE7E,SAASgE,IACd,OAAO7D,qBAAW4D,GAGb,IAAME,EAAsElE,IAAMC,cACvF,IAOK,SAASkE,GAAT,GAAkG,IAA3D5D,EAA0D,EAA1DA,SAA0D,EAC5CC,qBAAWqD,EAAqB,CACxFC,YAAavC,EACbwC,YAAavC,IAHuF,mBAC/F4C,EAD+F,KAC1EC,EAD0E,KAMtG,OACE,cAACL,EAAoBtD,SAArB,CAA8BC,MAAOyD,EAArC,SACE,cAACF,EAA0BxD,SAA3B,CAAoCC,MAAO,CAAE0D,8BAA7C,SACG9D,MClBT,IAAM+D,GAAW,IAAIC,IAEd,SAASC,GAA0BlE,GAAuD,IAAD,EACTA,EAA7EC,gBADsF,MAC3E,KAD2E,EACrE2B,EAA4D5B,EAA5D4B,SAAUuC,EAAkDnE,EAAlDmE,kBAAmBC,EAA+BpE,EAA/BoE,YAAa7C,EAAkBvB,EAAlBuB,MAAOD,EAAWtB,EAAXsB,OACpE+C,EAAeV,IACfW,EAAU,CAAEhD,SAAQM,WAAUL,SAH0D,EAI1DgD,mBAAqB,IAAIC,IAAWF,IAJsB,mBAIvFG,EAJuF,KAI3EC,EAJ2E,OAKhEH,oBAAS,GALuD,mBAKvFI,EALuF,KAK9EC,EAL8E,KA+B9F,OAxBAC,qBAAU,WACJF,IACF1B,EAAOP,KAAP,UAAe0B,EAAf,iBACAQ,GAAW,GACXF,EAAc,IAAIF,IAAWF,OAI9B,CAACD,IAEJQ,qBAAU,WACRJ,EAAWE,QACRG,MAAK,WACAvD,GACFyC,GAASe,SAASxD,GAEpB0B,EAAOP,KAAP,UAAe0B,EAAf,6BACAQ,GAAW,MAEZI,OAAM,SAACC,GAAD,OAAOhC,EAAOR,MAAP,UAAgB2B,EAAhB,mCAAsDa,SAGrE,CAACR,EAAWE,UAGb,cAACR,EAAkB/D,SAAnB,CAA4BC,MAAO,CAAE6E,IAAKT,EAAYU,WAAYR,GAAlE,SAA8E1E,ICzC3E,IAAMmF,GAAgE1F,IAAMC,cACjF,IAGK,SAAS0F,KACd,OAAOvF,qBAAWsF,IAGb,SAASE,GAAgCtF,GAA6D,IACnGC,EAAaD,EAAbC,SACAuD,EAAgBG,IAAhBH,YAFkG,EAGpFvB,IAC4BuB,GAA1ClC,EAJkG,EAIlGA,OAAQC,EAJ0F,EAI1FA,MAAOK,EAJmF,EAInFA,SAEvB,OACE,cAACsC,GAAD,CACEE,YAAahC,EACb+B,kBAAmBiB,GACnBxD,SAAUA,EACVL,MAAOA,EACPD,OAAQA,EALV,SAOGrB,ICtBA,IAAMsF,GAAgE7F,IAAMC,cACjF,IAGK,SAAS6F,KACd,OAAO1F,qBAAWyF,IAGb,SAASE,GAAgCzF,GAA6D,IACnGC,EAAaD,EAAbC,SACAwD,EAAgBE,IAAhBF,YAFkG,EAGpFxB,IAC4BwB,GAA1CnC,EAJkG,EAIlGA,OAAQC,EAJ0F,EAI1FA,MAAOK,EAJmF,EAInFA,SAEvB,OACE,cAACsC,GAAD,CACEE,YAAa/B,EACb8B,kBAAmBoB,GACnB3D,SAAUA,EACVL,MAAOA,EACPD,OAAQA,EALV,SAOGrB,I,IC3BKyF,G,2DAAAA,K,YAAAA,E,kBAAAA,E,cAAAA,E,eAAAA,Q,KCOL,ICdFC,GDcQC,GAAoDlG,IAAMC,cAAc,IAM9E,SAASkG,GAAuB7F,GAAyD,IAAD,EACjEA,EAApBC,gBADqF,MAC1E,KAD0E,EAErFuD,EAAgBG,IAAhBH,YAEFsC,EADgB7D,IACsBuB,GAAa3B,WAJoC,EAKnD0C,mBAASmB,GAAgBK,MAL0B,mBAKtFC,EALsF,KAKvEC,EALuE,OAOrD1B,mBAA6B,IAPwB,mBAOtF2B,EAPsF,KAOxEC,EAPwE,OAQ3C5B,oBAAS,GARkC,mBAQtF6B,EARsF,KAQnEC,EARmE,KAUvFC,EAAgBC,QAAQ7F,SAExB8F,EAAeC,uBAAY,WAC/B,IAAMC,EAAiB,yCAAG,6BAAAC,EAAA,6DACxBV,EAAiBP,GAAgBkB,SADT,kBAGhBC,sBAAW,wBAHK,uBAIEC,0BAJF,OAKtBC,GADIA,EAJkB,QAKIC,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAZ,MAAwB,CACpDD,UACAC,KAAK,2BAAMA,GAAP,IAAaC,KAAK,GAAD,OAAKD,EAAKC,KAAV,aAAmBD,EAAKE,OAAxB,WAGvBC,KAAQC,QAAQ,CAAEhB,gBAAeiB,WAAYzB,GAAyBiB,GACtEd,EAAiBP,GAAgB8B,OAXX,kDAatBvE,EAAOR,MAAM,QAAb,MACAwD,EAAiBP,GAAgB+B,OAdX,0DAAH,qDAkBnBzB,IAAkBN,GAAgBkB,SAAWZ,IAAkBN,GAAgB8B,OAEnFd,MACC,CAACJ,EAAeN,EAAeF,IAgBlC,OAdAjB,qBAAU,WACJmB,IAAkBN,GAAgBK,MACpCS,MAED,CAACR,EAAeQ,IAEnB3B,qBAAU,WACR,GAAImB,IAAkBN,GAAgB8B,MAAO,CAC3C,IAAME,EAAiBL,KAAQM,WAC/BxB,EAAgBuB,GAChBrB,GAAqB,MAEtB,CAACL,IAEG,cAACJ,GAAexF,SAAhB,CAAyBC,MAAO,CAAE6F,eAAcE,qBAAhD,SAAsEnG,K,SCtE1E0F,K,sCAAAA,E,6CAAAA,Q,KAKL,IAUMiC,GAVc,SAACC,GAAD,MAA2B,CAC7C3I,QAAS,CAAE2I,gBACX1I,KAAMwG,GAAuBmC,oBAQzBF,GALqB,SAACG,GAAD,MAA8B,CACvD7I,QAAS,CAAE6I,mBACX5I,KAAMwG,GAAuBqC,uBCThB,SAASC,GAAmB3I,EAAyBC,GAClE,OAAQA,EAAOJ,MACb,KAAKwG,GAAuBmC,kBAC1B,OAAO,2BAAKxI,GAAZ,IAAmBuI,aAActI,EAAOL,QAAQ2I,eAClD,KAAKlC,GAAuBqC,qBAC1B,OAAO,2BAAK1I,GAAZ,IAAmByI,gBAAiBxI,EAAOL,QAAQ6I,kBACrD,QACE,MAAM,IAAIvI,MAAJ,wBAA2BD,EAAOJ,QCGvC,IAAM+I,GAA4DxI,IAAMC,cAC7E,IAGWwI,GAAoEzI,IAAMC,cACrF,IAGK,SAASyI,KACd,OAAOtI,qBAAWoI,IAGb,SAASG,KACd,OAAOvI,qBAAWqI,IAGb,SAASG,GAA2BtI,GAA6D,IAAD,EACzEA,EAApBC,gBAD6F,MAClF,KADkF,IAG1DC,qBAAW+H,GAAoB,CACxEJ,aAAc,KACdE,gBAAiB,OALkF,mBAG9FQ,EAH8F,KAGjFC,EAHiF,KAQrG,OACE,cAACN,GAAmB9H,SAApB,CAA6BC,MAAOkI,EAApC,SACE,cAACJ,GAAyB/H,SAA1B,CAAmCC,MAAO,CAAEmI,uBAA5C,SAAoEvI,M,wJC5B3D,SAASwI,GAAT,GAAiF,IAAD,IAApD5G,kBAAoD,MAAvC,GAAuC,EAAnCE,EAAmC,EAAnCA,SAAUkF,EAAyB,EAAzBA,QAC9DyB,EAAK,uBACNC,aAAiBC,aAVE,8CASb,aAENA,aAAY7G,IAFN,aAGN8G,aAAc5B,KAEnB,OAAO6B,aAAcC,aAAYC,WAAWC,KAAKP,IAAS7G,GCZ5D,IAmBeqH,GAnBW,WAAO,IAAD,EACOvF,IAA7BF,EADsB,EACtBA,YAAaD,EADS,EACTA,YACbvE,EAAYY,IAAZZ,QACFkK,EAAgBlH,IACdJ,EAAesH,EAAc1F,GAA7B5B,WACAE,EAAaoH,EAAc3F,GAA3BzB,SAER,OAAK9C,EASEmK,GALU,CACfvH,aACAoF,QAAShI,EAAQgI,QACjBlF,aANO,MC8BIsH,GA5BK,WAAiB,IAAD,ENE3BvJ,qBAAW8F,IMDVM,EAD0B,EAC1BA,aAAcE,EADY,EACZA,kBADY,EAEF7B,mBAAkC,IAFhC,mBAE3B+E,EAF2B,KAEjBC,EAFiB,KAG1BpJ,EnBMDL,qBAAWF,GmBNVO,gBACFqJ,EAAiBN,KACfjK,EAAYY,IAAZZ,QAER4F,qBAAU,WACJuB,GAAqBF,EAAauD,QACpCF,EAAYrD,KAEb,CAACE,EAAmBF,EAAcqD,IASrC,MAAO,CACLtK,UACAqK,WACAE,iBACAE,kBAXwB,SAACrJ,GACzB,IAAMpB,EAAUqK,EAASK,MAAK,qBAAG1C,UAA0B5G,KACvDpB,GACFkB,EAAgBnB,EAAiCC,O,wECnBvD,IAAM2K,GAAgB,SAACN,GAAD,OACpBA,EAAStC,KAAI,gBAAGE,EAAH,EAAGA,KAAMD,EAAT,EAASA,QAAT,MAAwB,CACnC4C,KAAM,OACNC,IAAK7C,EACL8C,KAAO7C,EAAKC,KAAgB6C,oBAC5B3J,MAAO4G,OA6BIgD,iBA1BE,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,UAAuB,EACwBb,KAAzDpK,EADiC,EACjCA,QAASqK,EADwB,EACxBA,SAAUE,EADc,EACdA,eAAgBE,EADF,EACEA,kBADF,EAEJ/F,IAA7BH,EAFiC,EAEjCA,YAAaC,EAFoB,EAEpBA,YAEfpD,GAAe,OAAPpB,QAAO,IAAPA,OAAA,EAAAA,EAASgI,UAAW,GAMlC,OACE,eAACkD,GAAA,EAAD,CAAWD,UAAWA,EAAtB,UACE,4BAAI1G,IACJ,cAAC4G,GAAA,EAAD,CACE/J,MAAOA,EACPgK,SATW,SAACC,EAAD,GAA+B,IAAlBjK,EAAiB,EAAjBA,MAC5BqJ,EAAkBrJ,IASdkK,YAAY,iBACZC,OAAK,EACLC,WAAS,EACTnG,QAASsF,GAAcN,KAEzB,4BAAIE,GAAc,6BAA0B/F,EAA1B,aAA0C+F,UAKnDS,CAAf,M,UCKeS,GAxCO,SAAC,GAAuC,IAArCvF,EAAoC,EAApCA,WAAYD,EAAwB,EAAxBA,IAAK7D,EAAmB,EAAnBA,MAAmB,EACzBkD,mBAAS,IADgB,mBACpDoG,EADoD,KACzCC,EADyC,OAEPrG,mBAAS,IAFF,mBAEpDsG,EAFoD,KAEhCC,EAFgC,KAqC3D,OAjCAjG,qBAAU,WACR,OAAKK,GAAQC,GAAe9D,GAO5B6D,EAAI6F,OAAO1J,MACR2J,YAAW,SAACC,GACXL,EAAaK,EAAIC,eAElBpG,MAAK,SAACqG,GACLC,EAAwBD,KAEzBnG,OAAM,SAACC,GAAD,OAAOhC,EAAOR,MAAM,uBAAwBwC,MAGrDC,EAAI6F,OAAO1J,MACRgK,qBAAoB,SAACJ,GACpBH,EAAsBG,EAAIC,eAE3BpG,MAAK,SAACqG,GACLG,EAAiCH,KAElCnG,OAAM,SAACC,GAAD,OAAOhC,EAAOR,MAAM,uBAAwBwC,MAE9C,WACLqG,GAAkCA,IAClCF,GAAyBA,OA3BzBR,EAAa,SACbE,EAAsB,KAIxB,IAAIM,EAUAE,IAcH,CAACpG,EAAKC,EAAY9D,IAEd,CAAEsJ,YAAWE,uBChDP,SAASU,GAAelK,GAGrC,MAAO,CACLmK,oBAHuB,gBAAYnK,EAAZ,WAIvBoK,gBAHmB,gBAAYpK,EAAZ,aCmBvB,IAsCeqK,GAtCU,SAAC,GAAuC,IAArCvG,EAAoC,EAApCA,WAAYD,EAAwB,EAAxBA,IAAK7D,EAAmB,EAAnBA,MAAmB,EAChBkD,mBAAS,IADO,mBACvDoH,EADuD,KACtCC,EADsC,KAGtDJ,EAAwBD,GAAelK,GAAvCmK,oBAgCR,OA/BA3G,qBAAU,WAKR,IAAIgH,EACAC,EALJ,GAAK5G,GAAQC,GAAe9D,EAwB5B,OAjBA6D,EAAI6G,MAAMP,GACPQ,eAAc,SAACf,GACd,IAAMgB,EAA4BhB,EAAIC,WACtChG,EAAI6G,MAAMP,GACPG,gBAAgBM,GAA2B,SAAChB,GACvCA,EAAIiB,UACNN,EAAmBX,EAAIiB,SAASC,WAGnCrH,MAAK,SAACqG,GACLW,EAAuBX,QAG5BrG,MAAK,SAACqG,GACLU,EAAqBV,KAGlB,WACLW,GAAwBA,IACxBD,GAAsBA,OAEvB,CAAC1G,EAAY9D,EAAO6D,EAAKsG,IAErB,CAAEG,oBCnCX,IAmDeS,GAnDQ,SAAC,GAA+C,IAA7CjH,EAA4C,EAA5CA,WAAYD,EAAgC,EAAhCA,IAAK7D,EAA2B,EAA3BA,MAA2B,EAC3BkD,mBAAS,CAAE8H,gBAAiB,EAAGC,cAAe,IADnB,mBAC7DC,EAD6D,KAC9CC,EAD8C,OAE7BjI,mBAAS,CAAEkI,uBAAwB,IAFN,mBAE7DC,EAF6D,KAE/CC,EAF+C,KAG9DC,ECvBSlM,aDwBP+K,EAAoBF,GAAelK,GAAnCoK,gBA4CR,OA3CA5G,qBAAU,WAMR,IAAIgI,EACAC,EANJ,GAAK5H,GAAQC,GAAeD,EAAI6G,MAAMN,IAAqBpK,EA6B3D,OAtBA6D,EAAI6G,MAAMN,GACPc,cAAcK,GAAQ,SAAC3B,GACtB,IAAM8B,EAAyB9B,EAAI+B,IAAI,0BAA0BC,WAE3DZ,EAAkBU,EADM9B,EAAI+B,IAAI,yBAAyBC,WAE/DT,EAAgB,CACdH,gBAAiBA,EAAkB,EAAI,EAAIA,EAC3CC,cAAeS,OAGlBjI,MAAK,SAACqG,GACL0B,EAA2B1B,KAG/BjG,EAAI6G,MAAMN,GACPiB,aAAaE,GAAQ,SAAC3B,GACrB0B,EAAe,CAAEF,uBAAwBxB,EAAI+B,IAAI,wBAAwBC,gBAE1EnI,MAAK,SAACqG,GACL2B,EAA0B3B,KAGvB,WACL0B,GAA4BA,IAC5BC,GAA2BA,OAE5B,CAAC5H,EAAKC,EAAY9D,EAAOoK,EAAiBmB,IAE7C/H,qBAAU,WACHM,IACHqH,EAAgB,CAAEH,gBAAiB,EAAGC,cAAe,IACrDK,EAAe,CAAEF,uBAAwB,OAE1C,CAACtH,IAEG,CAAEuH,eAAcH,kBEjDVW,GAVM,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,MAAkC,GACzCC,EADyC,EAA3BA,iBAClClI,EAD6D,EAC7DA,WAAYD,EADiD,EACjDA,IAEdoI,EAAY5C,GAAc,CAAExF,MAAK7D,MAAO+L,EAAOjI,eAC/CoI,EAAgB7B,GAAiB,CAAExG,MAAK7D,MAAO8L,EAAahI,eAC5DqI,EAAeC,GAAgB,CAAEvI,MAAK7D,MAAO8L,EAAahI,eAEhE,OAAO,uCAAKmI,GAAcC,GAAkBC,I,sLCF9C,IA8BevD,iBA9BO,SAAC,GAAoD,IAAlDyD,EAAiD,EAAjDA,UAAWL,EAAsC,EAAtCA,cAAenD,EAAuB,EAAvBA,UAAuB,ECJ3D,SAA6BwD,GAAgC,IAAD,EACpC/J,IAA7BH,EADiE,EACjEA,YAAaC,EADoD,EACpDA,YADoD,EAG3Cc,mBAAS,CAAE4I,YAAa,GAAIC,MAAO,KAHQ,mBAGlEO,EAHkE,KAGzDC,EAHyD,KAezE,OAVA/I,qBAAU,WACR,IAAIuI,EAAQ5J,EACR2J,EAAc1J,EACdiK,IAAcrL,IAChB+K,EAAQ3J,EACR0J,EAAc3J,GAEhBoK,EAAW,CAAET,cAAaC,YACzB,CAACM,EAAWlK,EAAaC,IAErBkK,EDVwBE,CAAoBH,GAA3CP,EADgE,EAChEA,YAAaC,EADmD,EACnDA,MADmD,EAQpEF,GAAa,CAAEC,cAAaC,QAAOC,kBALrCxC,EAHsE,EAGtEA,mBACAF,EAJsE,EAItEA,UACiBsB,EALqD,EAKtEN,gBALsE,IAMtEY,cAAiBD,EANqD,EAMrDA,cAAeD,EANsC,EAMtCA,gBAChBI,EAPsD,EAOtEC,aAAgBD,uBAGZqB,EAAaJ,IAActL,EAAS,SAAW,SACrD,OACE,cAAC+H,GAAA,EAAD,CAAWD,UAAWA,EAAtB,SACE,eAAC6D,GAAA,EAAD,CAAM7D,UAAU,YAAhB,UACE,cAAC6D,GAAA,EAAKC,QAAN,CAAcC,OAAM,UAAKH,EAAL,aAAoBV,KACxC,eAACW,GAAA,EAAKG,YAAN,CAAkBhE,UAAU,cAA5B,UACE,+CAAkBS,KAClB,yDAA4BE,KAE5B,qDAAwBwB,KACxB,mDAAsBC,KAEtB,oBAAIpC,UAAU,YACd,gEAAmC+B,KACnC,sDAAyBQ,eAMpBxC,CAAf,M,UExCe,SAASkE,KAA0B,IAC5BC,EAAqB/I,KAAjCF,WACYkJ,EAAqB7I,KAAjCL,WAFuC,EAIfZ,oBAAS,GAJM,mBAIxC+J,EAJwC,KAI9BC,EAJ8B,KAU/C,OAJA1J,qBAAU,WACR0J,EAAYH,GAAoBC,KAC/B,CAACD,EAAkBC,IAEfC,E,ICGGE,G,SCIG,SAASC,GAAT,GAA2E,IAAtC/F,EAAqC,EAArCA,MAAOvJ,EAA8B,EAA9BA,KACnDuP,EAAcP,KACPQ,EAActJ,KAAnBH,IAEF0H,ENzBSlM,aM0BP+C,EAAgBE,IAAhBF,YACAxE,EAAYY,IAAZZ,QAN+E,EAQzDsF,mBAAoB,MARqC,mBAQhFrF,EARgF,KAQvE0P,EARuE,OCJ1E,YAA0E,IAA5ClG,EAA2C,EAA3CA,MAAOvJ,EAAoC,EAApCA,KAC5CuP,EAAcP,KACPQ,EAActJ,KAAnBH,IACK2J,EAAcrJ,KAAnBN,IACAjG,EAAYY,IAAZZ,QACA8I,EAAoBK,KAApBL,gBAL8E,EAOhCxD,mBAA8B,CAClFuK,aAAc,KACdC,aAAc,OATsE,mBAO/EC,EAP+E,KAO1DC,EAP0D,KAoCtF,OAxBApK,qBAAU,WACR,GAAI6J,EAAa,CACf,IAAII,EAAe,KACfC,EAAe,KACnB,GAAI9P,EAAS,CACX,OAAQE,GACN,KAAKqP,GAAiBU,OACpBJ,EAAe,kBAAMD,EAAUM,GAAGC,OAAOC,OAAO3G,IAChDqG,EAAe,kBAAMJ,EAAUQ,GAAGC,OAAOC,OAAO3G,GAAO4G,YAAYrQ,IACnE,MACF,KAAKuP,GAAiBe,SAChBxH,IACF+G,EAAe,kBAAMD,EAAUM,GAAGK,SAASC,SAAS1H,EAAiBW,IACrEqG,EAAe,kBAAMJ,EAAUQ,GAAGK,SAASC,SAAS1H,EAAiBW,GAAO4G,YAAYrQ,KAE1F,MACF,QACE,MAAM,IAAIO,MAAJ,wBAA2BL,IAErC8P,EAAuB,CAAEH,eAAcC,qBAG1C,CAAC9P,EAASyP,EAAahG,EAAOX,EAAiB4G,EAAWE,EAAW1P,IAEjE6P,EDvBgCU,CAAmB,CAAEhH,QAAOvJ,SAA3D2P,EAT+E,EAS/EA,aAAcC,EATiE,EASjEA,aAEdvG,EAAwBH,KAAxBG,oBAoDR,OAlDA3D,qBAAU,WAuBJ6J,GAAexP,GAtBD,yCAAG,qCAAAyH,EAAA,6DAIbgJ,EAAchB,EAAU3K,SAAS4L,WAAW,kBAAmB1Q,GAE/D2Q,EAAiBlB,EAAU3K,SAAS4L,WAAW,iBAAkB,CACrEE,QAASlD,EACT1N,QAAS6Q,aAASJ,EAAYK,WARb,SAWYrB,EAAUsB,IAAI3Q,MAAM4Q,KAApB,YACxBzM,GADwB,O3B5CS,8D2B8CtCsM,aAASF,EAAeG,UAbP,OAWbG,EAXa,OAiBbC,EAAmBzB,EAAU3K,SAAS4L,WAAW,kBAAmBO,GACpEtI,EAAeuI,EAAiBlF,WACtC1C,EAAoBZ,GAAsCC,IAnBvC,2CAAH,oDAuBhBwI,KAED,CAAC3B,EAAalG,EAAqBoE,EAAQ1N,EAASyP,EAAU3K,SAAU2K,EAAUsB,IAAI3Q,MAAOmE,IAEhGoB,qBAAU,YACQ,yCAAG,qCAAA8B,EAAA,2DACb1H,GAAW8P,GAAgBD,GADd,iCAEYC,IAFZ,cAETuB,EAFS,OAGTC,EAASD,EAAaC,OAAOtD,WAHpB,SAIY6B,IAJZ,OAIT0B,EAJS,OAKTN,EAAOM,EAAaR,QACpB9Q,EAAU,CACdgR,OACAO,OAAQ,CACNC,cAAezR,EAAQ0R,YAEzBC,aAAc,EACdL,UAEF3B,EAAW1P,GAdI,4CAAH,qDAkBhB2R,KACC,CAAC5R,EAAS6P,EAAcC,IAEpB,CACL7P,Y,SDpEQsP,K,oBAAAA,E,iBAAAA,Q,KG0DGsC,OAnDf,YAAuG,IAA7EC,EAA4E,EAA5EA,UAAWC,EAAiE,EAAjEA,aAAcC,EAAmD,EAAnDA,mBAAoBC,EAA+B,EAA/BA,QAASxI,EAAsB,EAAtBA,MAAOvJ,EAAe,EAAfA,KACxEwP,EAActJ,KAAnBH,IAD4F,EAE1DkD,KAAlCP,EAF4F,EAE5FA,aAAcE,EAF8E,EAE9EA,gBAEdtE,EAAgBE,IAAhBF,YACAxE,EAAYY,IAAZZ,QACAC,EAAYuP,GAA0B,CAAE/F,QAAOvJ,SAA/CD,QA0CR,MAAO,CAAEiS,iBAbgB,WACvB,OAAQhS,GACN,KAAKqP,GAAiBU,OACpB,OAAO6B,IAAc9R,EAEvB,KAAKuP,GAAiBe,SACpB,OAAOwB,IAAchJ,IAAoB9I,EAE3C,QACE,MAAM,IAAIO,MAAJ,wBAA2BL,MAIZiS,gBAxCN,yCAAG,mCAAAzK,EAAA,kEAEf1H,IAAW8R,EAFI,oDAKpBC,GAAa,GAEPK,EAAgB1C,EAAUQ,GAAV,gBAAsB1L,EAAtB,aAA6C6N,YRvCxD5Q,aQuC4ExB,EAAS2I,GAC1FvD,EAAkC,CACtCiN,OAAQ,GAENC,EAAsCvS,GACtCA,EAAQiI,KAAKuK,WAZG,kCAaKC,0BAAezS,EAAQiI,KAAKE,QAbjC,QAaZuK,EAbY,OAclBrN,EAAQsN,OAASD,EAASC,OAC1BJ,EAAgBvS,EAAQgI,QAfN,yBAiBdoK,EAAcQ,YAAYL,EAA1B,eAA8ClN,IAjBhC,QAkBpB2M,EAAmBC,EAAQY,aAlBP,kDAoBpBb,EAAmBC,EAAQzO,OAC3BQ,EAAOR,MAAP,MArBoB,yBAuBpBuO,GAAa,GAvBO,6EAAH,uD,8ICrBvB,IAyCe/G,iBAzCA,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,UAAuB,EACL3F,oBAAS,GADJ,mBAChCwM,EADgC,KACrBC,EADqB,OAEDzM,mBAAS,MAFR,mBAEhCwN,EAFgC,KAEnBC,EAFmB,OAGOzN,mBAAS,IAHhB,mBAGhC0N,EAHgC,KAGfhB,EAHe,KAIjCvC,EAAcP,KACZtG,EAAiBO,KAAjBP,aAL+B,EAUOiJ,GAAe,CAC3DpI,MAAOqJ,EACPhB,YACAG,QAPc,CACdzO,MAAO,uBACPqP,YAAa,qCAMbb,qBACAD,eACA7R,KAAMqP,GAAiBU,SANjBiC,EAV+B,EAU/BA,iBAAkBC,EAVa,EAUbA,gBAa1B,OAAK1C,EAKH,eAACvE,GAAA,EAAD,CAAWD,UAAWA,EAAtB,UACE,cAACgI,GAAA,EAAD,CAAO7H,SAXM,SAAC8H,GAChBlB,EAAmB,IACnBe,EAAeG,EAAMC,OAAO/R,QASCA,MAAO0R,IAClC,cAACM,GAAA,EAAD,CAAQC,SAAUnB,IAAoBoB,QAASnB,EAA/C,yBAGA,4BAAIvJ,GAAY,gCAA6BA,KAC7C,qBAAKqC,UAAU,SAAf,SACE,4BAAwB,KAApB+H,GAA0BA,SAX3B,OAiBIhI,CAAf,M,UCxBeuI,GArBY,SAAC,GAAuC,IAArCzK,EAAoC,EAApCA,gBAAiB1G,EAAmB,EAAnBA,MAAmB,EAC1CY,IACyBZ,GAAvCQ,EAFwD,EAExDA,WAAYE,EAF4C,EAE5CA,SACpB,IAAK,IAAD,EACiC0Q,aAAa1K,EAAiBlG,GAA1D6Q,EADL,oBAEEzL,EAAUc,EACd,IAAK2K,EAOHzL,EANyBwB,GAAiB,CACxC5G,aACAoF,QAASc,EACThG,aAKJ,OAAOkF,EACP,MAAOhC,GACP,MAAM,IAAIzF,MAAM,sB,wECXpB,IAwEeyK,iBAxEE,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,UAAuB,EACP3F,oBAAS,GADF,mBAClCwM,EADkC,KACvBC,EADuB,OAECzM,mBAAS,KAFV,mBAElCoO,EAFkC,KAEnBC,EAFmB,OAGCrO,mBAAS,IAHV,mBAGlCsO,EAHkC,KAGnBC,EAHmB,OAKKvO,qBALL,mBAKlCwO,EALkC,KAKjBC,EALiB,OAMKzO,mBAAS,IANd,mBAMlC0N,EANkC,KAMjBhB,EANiB,KAOnCgC,ECVO,WAA2C,IAChDzK,EAAwBH,KAAxBG,oBACA/E,EAAgBE,IAAhBF,YAkBR,OAhB6B,SAAC,GAA6C,IAA3CuP,EAA0C,EAA1CA,mBAAoBE,EAAsB,EAAtBA,SAClDF,EAAmB,IACnB,IACE,IAAMjL,EAAkByK,GAAmB,CAAEnR,MAAOoC,EAAasE,gBAAiBmL,IAC9EnL,IAAoBmL,GACtBF,EAAmB,kEAAD,OAAmEjL,IAEvFS,EAAoBZ,GAA6CG,IACjE,MAAO9C,GACPhC,EAAOR,MAAMwC,GACK,qBAAdA,EAAEiM,SACJ8B,EAAmB,qDDLIG,GACvBzE,EAAcP,KARqB,EAUC/F,KAAlCP,EAViC,EAUjCA,aAAcE,EAVmB,EAUnBA,gBAVmB,EAeK+I,GAAe,CAC3DpI,MAAOiK,EACP5B,YACAG,QAPc,CACdzO,MAAO,yBACPqP,YAAa,qCAMbb,qBACAD,eACA7R,KAAMqP,GAAiBe,WANjB4B,EAfiC,EAejCA,iBAAkBC,EAfe,EAefA,gBAuB1B,OAAK1C,EAKH,eAACvE,GAAA,EAAD,CAAWD,UAAWA,EAAtB,UACE,cAACkJ,GAAA,EAAKC,IAAN,UACE,eAACD,GAAA,EAAKE,OAAN,WACE,6CACA,cAACpB,GAAA,EAAD,CAAO1H,OAAK,EAACH,SAlBI,SAAC8H,GACxB,IAAMe,EAAWf,EAAMC,OAAO/R,MAC9ByS,EAAiBI,GACjBD,EAAqB,CACnBC,WACAF,wBAa6C3S,MAAOwS,IAChD,4BAAIE,GAAe,UAAOA,UAG9B,cAACK,GAAA,EAAKC,IAAN,UACE,eAACD,GAAA,EAAKE,OAAN,WACE,2CACA,cAACpB,GAAA,EAAD,CAAO7H,SA9BE,SAAC8H,GAChBlB,EAAmB,IACnB2B,EAAiBT,EAAMC,OAAO/R,QA4BGA,MAAOsS,SAGtC,cAACS,GAAA,EAAKC,IAAN,UACE,eAACD,GAAA,EAAKE,OAAN,WACE,cAACjB,GAAA,EAAD,CAAQC,SAAUnB,IAAoBoB,QAASnB,EAA/C,2BAGA,4BAAIrJ,GAAmBF,GAAnB,gCAA4DA,UAGpE,qBAAKqC,UAAU,SAAf,SACE,4BAAwB,KAApB+H,GAA0BA,SA3B3B,OAiCIhI,CAAf,M,iMEPeA,qBA3DR,YAAqC,IAArBC,EAAoB,EAApBA,UACfqJ,EAAgBpF,KADmB,EAEJxK,IAA7BH,EAFiC,EAEjCA,YAAaC,EAFoB,EAEpBA,YAEbM,E9BCDjE,qBAAW8D,G8BDVG,2BAGR,OAAKwP,EASH,mCACE,cAACpJ,GAAA,EAAD,CAAWD,UAAWA,EAAtB,SACE,eAACkJ,GAAA,EAAD,WACE,cAACA,GAAA,EAAKC,IAAN,UACE,cAACD,GAAA,EAAKE,OAAN,CAAaE,MAAO,EAApB,mBAA2BhQ,EAA3B,eAA6CC,OAE/C,eAAC2P,GAAA,EAAKC,IAAN,WACE,cAACD,GAAA,EAAKE,OAAN,CAAaE,MAAO,IACpB,cAACJ,GAAA,EAAKE,OAAN,CAAaE,MAAO,EAApB,SACE,cAAC,GAAD,CAAe9F,UAAWtL,EAAQiL,cAAehI,OAEnD,cAAC+N,GAAA,EAAKE,OAAN,CAAaE,MAAO,EAApB,SACE,qBAAKtJ,UAAU,eAAf,SACE,cAACmI,GAAA,EAAD,CAAQC,UAAWiB,EAAehB,QAxBnB,kBAAMxO,EAA2BV,MAwBhD,SACE,cAACoQ,GAAA,EAAD,CAAMC,QAAM,EAACvM,KAAK,mBAIxB,cAACiM,GAAA,EAAKE,OAAN,CAAaE,MAAO,EAApB,SACE,cAAC,GAAD,CAAe9F,UAAWrL,EAAQgL,cAAe7H,UAGrD,cAAC4N,GAAA,EAAKC,IAAN,UACE,cAACD,GAAA,EAAKE,OAAN,CAAaE,MAAO,GAApB,SACE,cAAC,GAAD,QAGJ,cAACJ,GAAA,EAAKC,IAAN,UACE,cAACD,GAAA,EAAKE,OAAN,CAAaE,MAAO,GAApB,SACE,cAAC,GAAD,QAGJ,cAACJ,GAAA,EAAKC,IAAN,UACE,cAACD,GAAA,EAAKE,OAAN,CAAaE,MAAO,GAApB,SACE,cAAC,GAAD,eAzCR,cAACG,GAAA,EAAD,CAAQC,QAAM,EAAd,SACE,cAACC,GAAA,EAAD,QAiDO5J,CAAf,MC1Ce6J,OAzBf,WACE,OACE,cAACjQ,GAAD,UACE,cAACyB,GAAD,UACE,cAACG,GAAD,UACE,cAACI,GAAD,UACE,cAAC9F,EAAD,UACE,cAACuI,GAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOyL,KAAM,IAAb,UACE,cAAC,EAAD,IACA,cAAC,GAAD,yBtCXS,WAAO,IAAD,gBACnBzT,GADmB,IACnC,2BAAmC,CAAC,IAAzB0T,EAAwB,QACjC,IAAKtT,skBAAYsT,GACf,MAAM,IAAIxU,MAAJ,kBAAqBwU,EAArB,eAHyB,+BuCLrCC,GAEAC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bc437c7e.chunk.js","sourcesContent":["// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport type { Account } from '../types/accountTypes';\n\nenum AccountActionsTypes {\n  SET_ACCOUNT = 'SET_ACCOUNT'\n}\n\nconst setAccount = (account: Account) => ({\n  payload: { account },\n  type: AccountActionsTypes.SET_ACCOUNT\n});\n\nconst AccountActionCreators = {\n  setAccount\n};\n\nexport { AccountActionsTypes, AccountActionCreators };\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\nimport { Menu } from 'semantic-ui-react';\n\nconst TopBar = () => (\n  <Menu pointing secondary>\n    <Menu.Item>Home</Menu.Item>\n  </Menu>\n);\n\nexport default TopBar;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { AccountActionsTypes } from '../actions/accountActions';\nimport type { AccountsActionType, AccountState } from '../types/accountTypes';\n\nexport default function accountReducer(state: AccountState, action: AccountsActionType): AccountState {\n  switch (action.type) {\n    case AccountActionsTypes.SET_ACCOUNT:\n      return { ...state, account: action.payload.account };\n\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useContext, useReducer } from 'react';\n\nimport accountReducer from '../reducers/accountReducer';\nimport { AccountContextType, AccountsActionType } from '../types/accountTypes';\n\ninterface AccountContextProviderProps {\n  children: React.ReactElement;\n}\n\nexport interface UpdateAccountContext {\n  dispatchAccount: React.Dispatch<AccountsActionType>;\n}\n\nexport const AccountContext: React.Context<AccountContextType> = React.createContext({} as AccountContextType);\n\nexport const UpdateAccountContext: React.Context<UpdateAccountContext> = React.createContext(\n  {} as UpdateAccountContext\n);\n\nexport function useAccountContext() {\n  return useContext(AccountContext);\n}\n\nexport function useUpdateAccountContext() {\n  return useContext(UpdateAccountContext);\n}\n\nexport function AccountContextProvider(props: AccountContextProviderProps): React.ReactElement {\n  const { children = null } = props;\n\n  const [account, dispatchAccount] = useReducer(accountReducer, { account: null });\n\n  return (\n    <AccountContext.Provider value={account}>\n      <UpdateAccountContext.Provider value={{ dispatchAccount }}>{children}</UpdateAccountContext.Provider>\n    </AccountContext.Provider>\n  );\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nconst expectedVariables = [\n  'REACT_APP_CHAIN_1',\n  'REACT_APP_CHAIN_2',\n  'REACT_APP_SUBSTRATE_PROVIDER_CHAIN_1',\n  'REACT_APP_SUBSTRATE_PROVIDER_CHAIN_2',\n  'REACT_APP_LANE_ID',\n  'REACT_APP_KEYRING_DEV_LOAD_ACCOUNTS',\n  'REACT_APP_SS58_PREFIX_CHAIN_1',\n  'REACT_APP_SS58_PREFIX_CHAIN_2',\n  'REACT_APP_BRIDGE_ID_CHAIN_1',\n  'REACT_APP_BRIDGE_ID_CHAIN_2'\n];\n\nconst checkExpectedVariables = () => {\n  for (const v of expectedVariables) {\n    if (!process.env[v]) {\n      throw new Error(`Missing ${v} variable`);\n    }\n  }\n  return true;\n};\n\nconst checkEnvVariable = (variable: string) => {\n  const envVariable = process.env[variable];\n  if (!envVariable) {\n    throw new Error(`Env Variable ${variable} was not defined`);\n  }\n  return envVariable;\n};\n\nexport { checkEnvVariable, checkExpectedVariables };\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { u8aConcat } from '@polkadot/util';\nimport { blake2AsU8a, keccakAsU8a } from '@polkadot/util-crypto';\n\nimport customTypesMillau from './customTypesMillau.json';\nimport customTypesRialto from './customTypesRialto.json';\n\nfunction hasherH512(data: any) {\n  return u8aConcat(blake2AsU8a(data), keccakAsU8a(data));\n}\n\nconst getCustomTypesAndHasher = (chain: string) => {\n  switch (chain) {\n    case 'Millau':\n      return { hasher: hasherH512, types: customTypesMillau };\n    case 'Rialto':\n      return { types: customTypesRialto };\n    default:\n      throw new Error(`Unknown chain: ${chain}`);\n  }\n};\n\nexport { getCustomTypesAndHasher };\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { WsProvider } from '@polkadot/api';\nimport { ApiOptions } from '@polkadot/api/types';\nimport { ProviderInterface } from '@polkadot/rpc-provider/types';\n\nimport { checkEnvVariable } from '../util/envVariablesValidations';\nimport { getCustomTypesAndHasher } from './substrateCustomTypes/';\n\ntype CustomHasher = (data: Uint8Array) => Uint8Array;\n\ninterface ChainConfig {\n  bridgeId: string;\n  hasher?: CustomHasher;\n  types: ApiOptions['types'];\n  SS58Format: number;\n  provider: ProviderInterface;\n}\n\ninterface ChainConfigs {\n  [chain: string]: ChainConfig;\n}\n\nconst getChainNames = () => {\n  return [checkEnvVariable('REACT_APP_CHAIN_1'), checkEnvVariable('REACT_APP_CHAIN_2')];\n};\n\nexport const [CHAIN_1, CHAIN_2] = getChainNames();\n\nconst getProvider = (provider: string) => new WsProvider(provider);\n\nconst getTypeAndHasher = (chainNumber: string) =>\n  getCustomTypesAndHasher(checkEnvVariable(`REACT_APP_CHAIN_${chainNumber}`));\n\nconst createConfigObject = (chainNumber: string) => {\n  const { types, hasher } = getTypeAndHasher(chainNumber);\n  return {\n    SS58Format: parseInt(checkEnvVariable(`REACT_APP_SS58_PREFIX_CHAIN_${chainNumber}`)),\n    bridgeId: checkEnvVariable(`REACT_APP_BRIDGE_ID_CHAIN_${chainNumber}`),\n    hasher,\n    provider: getProvider(checkEnvVariable(`REACT_APP_SUBSTRATE_PROVIDER_CHAIN_${chainNumber}`)),\n    types\n  };\n};\n\nexport const getChainConfigs = (): ChainConfigs => {\n  const [chain1, chain2] = getChainNames();\n  const configs = {\n    [chain1]: createConfigObject('1'),\n    [chain2]: createConfigObject('2')\n  };\n\n  return configs;\n};\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const SOURCE = 'sourceChain';\nexport const TARGET = 'targetChain';\n\nexport const ESTIMATED_FEE_RUNTIME_API_CALL = 'OutboundLaneApi_estimate_message_delivery_and_dispatch_fee';\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\nimport winston from 'winston';\n\nwinston.addColors({\n  debug: 'grey',\n  error: 'red',\n  info: 'green',\n  warn: 'blue'\n});\n\nconst myformat = winston.format.cli({\n  all: true\n});\n\nconst logger = winston.createLogger({\n  transports: [\n    new winston.transports.Console({\n      format: myformat\n    })\n  ]\n});\n\nexport default logger;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nenum SourceTargetActionsTypes {\n  SWAP_CHAINS = 'SWAP_CHAINS'\n}\n\nconst switchChains = () => ({\n  type: SourceTargetActionsTypes.SWAP_CHAINS\n});\n\nconst SourceTargetActionsCreators = {\n  switchChains\n};\n\nexport { SourceTargetActionsTypes, SourceTargetActionsCreators };\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { SourceTargetActionsTypes } from '../actions/sourceTargetActions';\nimport type { SourceTarget, SourceTargetAction } from '../types/sourceTargetTypes';\n\nexport default function sourceTargetReducer(state: SourceTarget, action: SourceTargetAction): SourceTarget {\n  switch (action.type) {\n    case SourceTargetActionsTypes.SWAP_CHAINS: {\n      return { ...state, sourceChain: state.targetChain, targetChain: state.sourceChain };\n    }\n    default: {\n      throw new Error(`Unhandled type: ${action.type}`);\n    }\n  }\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useContext, useReducer } from 'react';\n\nimport { CHAIN_1, CHAIN_2 } from '../configs/substrateProviders';\nimport sourceTargetReducer from '../reducers/sourceTargetReducer';\nimport type { SourceTarget, SourceTargetAction } from '../types/sourceTargetTypes';\n\nexport interface UpdateSourceTargetContext {\n  dispatchChangeSourceTarget: React.Dispatch<SourceTargetAction>;\n}\n\nexport interface SourceTargetContextProps {\n  children?: React.ReactElement;\n}\n\nexport const SourceTargetContext: React.Context<SourceTarget> = React.createContext({} as SourceTarget);\n\nexport function useSourceTarget() {\n  return useContext(SourceTargetContext);\n}\n\nexport const UpdateSourceTargetContext: React.Context<UpdateSourceTargetContext> = React.createContext(\n  {} as UpdateSourceTargetContext\n);\n\nexport function useUpdateSourceTarget() {\n  return useContext(UpdateSourceTargetContext);\n}\n\nexport function SourceTargetContextProvider({ children }: SourceTargetContextProps): React.ReactElement {\n  const [currentSourceTarget, dispatchChangeSourceTarget] = useReducer(sourceTargetReducer, {\n    sourceChain: CHAIN_1,\n    targetChain: CHAIN_2\n  });\n\n  return (\n    <SourceTargetContext.Provider value={currentSourceTarget}>\n      <UpdateSourceTargetContext.Provider value={{ dispatchChangeSourceTarget }}>\n        {children}\n      </UpdateSourceTargetContext.Provider>\n    </SourceTargetContext.Provider>\n  );\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ApiPromise } from '@polkadot/api';\nimport { ApiOptions } from '@polkadot/api/types';\nimport { ProviderInterface } from '@polkadot/rpc-provider/types';\nimport { TypeRegistry } from '@polkadot/types';\nimport React, { useEffect, useState } from 'react';\n\nimport { ApiPromiseContextType } from '../types/sourceTargetTypes';\nimport logger from '../util/logger';\nimport { useSourceTarget } from './SourceTargetContextProvider';\n\nexport interface ApiRxContextProviderProps {\n  children?: React.ReactElement;\n  provider: ProviderInterface;\n  ApiPromiseContext: React.Context<ApiPromiseContextType>;\n  contextType: string;\n  types?: ApiOptions['types'];\n  hasher?: ApiOptions['hasher'];\n}\n\nconst registry = new TypeRegistry();\n\nexport function ApiPromiseContextProvider(props: ApiRxContextProviderProps): React.ReactElement {\n  const { children = null, provider, ApiPromiseContext, contextType, types, hasher } = props;\n  const sourceTarget = useSourceTarget();\n  const options = { hasher, provider, types };\n  const [apiPromise, setApiPromise] = useState<ApiPromise>(new ApiPromise(options));\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    if (isReady) {\n      logger.info(`${contextType} was changed`);\n      setIsReady(false);\n      setApiPromise(new ApiPromise(options));\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sourceTarget]);\n\n  useEffect(() => {\n    apiPromise.isReady\n      .then(() => {\n        if (types) {\n          registry.register(types);\n        }\n        logger.info(`${contextType} type registration ready`);\n        setIsReady(true);\n      })\n      .catch((e) => logger.error(`${contextType} error in registration: ${e}`));\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [apiPromise.isReady]);\n\n  return (\n    <ApiPromiseContext.Provider value={{ api: apiPromise, isApiReady: isReady }}>{children}</ApiPromiseContext.Provider>\n  );\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useContext } from 'react';\n\nimport { getChainConfigs } from '../configs/substrateProviders';\nimport { SOURCE } from '../constants';\nimport { ApiPromiseContextType } from '../types/sourceTargetTypes';\nimport { ApiPromiseContextProvider } from './ApiPromiseContextProvider';\nimport { useSourceTarget } from './SourceTargetContextProvider';\n\ninterface ApiRxContextSourceProviderProps {\n  children: React.ReactElement;\n}\n\nexport const ApiPromiseSourceContext: React.Context<ApiPromiseContextType> = React.createContext(\n  {} as ApiPromiseContextType\n);\n\nexport function useApiSourcePromiseContext() {\n  return useContext(ApiPromiseSourceContext);\n}\n\nexport function ApiPromiseSourceContextProvider(props: ApiRxContextSourceProviderProps): React.ReactElement {\n  const { children } = props;\n  const { sourceChain } = useSourceTarget();\n  const chainsConfigs = getChainConfigs();\n  const { hasher, types, provider } = chainsConfigs[sourceChain];\n\n  return (\n    <ApiPromiseContextProvider\n      contextType={SOURCE}\n      ApiPromiseContext={ApiPromiseSourceContext}\n      provider={provider}\n      types={types}\n      hasher={hasher}\n    >\n      {children}\n    </ApiPromiseContextProvider>\n  );\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useContext } from 'react';\n\nimport { getChainConfigs } from '../configs/substrateProviders';\nimport { TARGET } from '../constants';\nimport { ApiPromiseContextType } from '../types/sourceTargetTypes';\nimport { ApiPromiseContextProvider } from './ApiPromiseContextProvider';\nimport { useSourceTarget } from './SourceTargetContextProvider';\n\ninterface ApiRxContextTargetProviderProps {\n  children: React.ReactElement;\n}\n\nexport const ApiPromiseTargetContext: React.Context<ApiPromiseContextType> = React.createContext(\n  {} as ApiPromiseContextType\n);\n\nexport function useApiTargetPromiseContext() {\n  return useContext(ApiPromiseTargetContext);\n}\n\nexport function ApiPromiseTargetContextProvider(props: ApiRxContextTargetProviderProps): React.ReactElement {\n  const { children } = props;\n  const { targetChain } = useSourceTarget();\n  const chainsConfigs = getChainConfigs();\n  const { hasher, types, provider } = chainsConfigs[targetChain];\n\n  return (\n    <ApiPromiseContextProvider\n      contextType={TARGET}\n      ApiPromiseContext={ApiPromiseTargetContext}\n      provider={provider}\n      types={types}\n      hasher={hasher}\n    >\n      {children}\n    </ApiPromiseContextProvider>\n  );\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport type { KeyringPair } from '@polkadot/keyring/types';\n\nexport interface KeyringContextType {\n  keyringPairs: Array<KeyringPair>;\n  keyringPairsReady: boolean;\n}\n\nexport enum KeyringStatuses {\n  INIT = 'INIT',\n  LOADING = 'LOADING',\n  READY = 'READY',\n  ERROR = 'ERROR'\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport type { KeyringPair } from '@polkadot/keyring/types';\nimport keyring from '@polkadot/ui-keyring';\nimport React, { useCallback, useContext, useEffect, useState } from 'react';\n\nimport { getChainConfigs } from '../configs/substrateProviders';\nimport { KeyringContextType, KeyringStatuses } from '../types/keyringTypes';\nimport logger from '../util/logger';\nimport { useSourceTarget } from './SourceTargetContextProvider';\n\ninterface KeyringContextProviderProps {\n  children: React.ReactElement;\n}\n\nexport const KeyringContext: React.Context<KeyringContextType> = React.createContext({} as KeyringContextType);\n\nexport function useKeyringContext() {\n  return useContext(KeyringContext);\n}\n\nexport function KeyringContextProvider(props: KeyringContextProviderProps): React.ReactElement {\n  const { children = null } = props;\n  const { sourceChain } = useSourceTarget();\n  const chainsConfigs = getChainConfigs();\n  const sourceChainSS58Format = chainsConfigs[sourceChain].SS58Format;\n  const [keyringStatus, setKeyringStatus] = useState(KeyringStatuses.INIT);\n\n  const [keyringPairs, setKeyringPairs] = useState<Array<KeyringPair>>([]);\n  const [keyringPairsReady, setkeyringPairsReady] = useState(false);\n\n  const isDevelopment = Boolean(process.env.REACT_APP_KEYRING_DEV_LOAD_ACCOUNTS);\n\n  const loadAccounts = useCallback(() => {\n    const asyncLoadAccounts = async () => {\n      setKeyringStatus(KeyringStatuses.LOADING);\n      try {\n        await web3Enable('Substrate Bridges UI');\n        let allAccounts = await web3Accounts();\n        allAccounts = allAccounts.map(({ address, meta }) => ({\n          address,\n          meta: { ...meta, name: `${meta.name} (${meta.source})` }\n        }));\n\n        keyring.loadAll({ isDevelopment, ss58Format: sourceChainSS58Format }, allAccounts);\n        setKeyringStatus(KeyringStatuses.READY);\n      } catch (e) {\n        logger.error('error', e);\n        setKeyringStatus(KeyringStatuses.ERROR);\n      }\n    };\n\n    if (keyringStatus === KeyringStatuses.LOADING || keyringStatus === KeyringStatuses.READY) return;\n\n    asyncLoadAccounts();\n  }, [isDevelopment, keyringStatus, sourceChainSS58Format]);\n\n  useEffect(() => {\n    if (keyringStatus === KeyringStatuses.INIT) {\n      loadAccounts();\n    }\n  }, [keyringStatus, loadAccounts]);\n\n  useEffect(() => {\n    if (keyringStatus === KeyringStatuses.READY) {\n      const keyringOptions = keyring.getPairs();\n      setKeyringPairs(keyringOptions);\n      setkeyringPairsReady(true);\n    }\n  }, [keyringStatus]);\n\n  return <KeyringContext.Provider value={{ keyringPairs, keyringPairsReady }}>{children}</KeyringContext.Provider>;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nenum TransactionActionTypes {\n  SET_ESTIMATED_FEE = 'SET_ESTIMATED_FEE',\n  SET_RECEIVER_ADDRESS = 'SET_RECEIVER_ADDRESS'\n}\n\nconst estimateFee = (estimatedFee: string) => ({\n  payload: { estimatedFee },\n  type: TransactionActionTypes.SET_ESTIMATED_FEE\n});\n\nconst setReceiverAddress = (receiverAddress: string) => ({\n  payload: { receiverAddress },\n  type: TransactionActionTypes.SET_RECEIVER_ADDRESS\n});\n\nconst TransactionActionCreators = {\n  estimateFee,\n  setReceiverAddress\n};\n\nexport { TransactionActionCreators, TransactionActionTypes };\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { TransactionActionTypes } from '../actions/transactionActions';\nimport type { TransactionsActionType, TransactionState } from '../types/transactionTypes';\n\nexport default function transactionReducer(state: TransactionState, action: TransactionsActionType): TransactionState {\n  switch (action.type) {\n    case TransactionActionTypes.SET_ESTIMATED_FEE:\n      return { ...state, estimatedFee: action.payload.estimatedFee };\n    case TransactionActionTypes.SET_RECEIVER_ADDRESS:\n      return { ...state, receiverAddress: action.payload.receiverAddress };\n    default:\n      throw new Error(`Unknown type: ${action.type}`);\n  }\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useContext, useReducer } from 'react';\n\nimport transactionReducer from '../reducers/transactionReducer';\nimport { TransactionContextType, TransactionsActionType } from '../types/transactionTypes';\n\ninterface TransactionContextProviderProps {\n  children: React.ReactElement;\n}\n\nexport interface UpdateTransactionContext {\n  dispatchTransaction: React.Dispatch<TransactionsActionType>;\n}\n\nexport const TransactionContext: React.Context<TransactionContextType> = React.createContext(\n  {} as TransactionContextType\n);\n\nexport const UpdateTransactionContext: React.Context<UpdateTransactionContext> = React.createContext(\n  {} as UpdateTransactionContext\n);\n\nexport function useTransactionContext() {\n  return useContext(TransactionContext);\n}\n\nexport function useUpdateTransactionContext() {\n  return useContext(UpdateTransactionContext);\n}\n\nexport function TransactionContextProvider(props: TransactionContextProviderProps): React.ReactElement {\n  const { children = null } = props;\n\n  const [transaction, dispatchTransaction] = useReducer(transactionReducer, {\n    estimatedFee: null,\n    receiverAddress: null\n  });\n\n  return (\n    <TransactionContext.Provider value={transaction}>\n      <UpdateTransactionContext.Provider value={{ dispatchTransaction }}>{children}</UpdateTransactionContext.Provider>\n    </TransactionContext.Provider>\n  );\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { compactAddLength, stringToU8a } from '@polkadot/util';\nimport { blake2AsHex, decodeAddress, encodeAddress } from '@polkadot/util-crypto';\n\nconst accountDerivation = 'pallet-bridge/account-derivation/account';\n\ninterface Data {\n  SS58Format: number;\n  bridgeId: string;\n  address: string;\n}\n\nexport default function getDeriveAccount({ SS58Format = 42, bridgeId, address }: Data): string {\n  const input = [\n    ...compactAddLength(stringToU8a(accountDerivation)),\n    ...stringToU8a(bridgeId),\n    ...decodeAddress(address)\n  ];\n  return encodeAddress(blake2AsHex(Uint8Array.from(input)), SS58Format);\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { getChainConfigs } from '../configs/substrateProviders';\nimport { useAccountContext } from '../contexts/AccountContextProvider';\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport getDerivedAccount from '../util/getDeriveAccount';\n\nconst useDerivedAccount = () => {\n  const { targetChain, sourceChain } = useSourceTarget();\n  const { account } = useAccountContext();\n  const chainsConfigs = getChainConfigs();\n  const { SS58Format } = chainsConfigs[targetChain];\n  const { bridgeId } = chainsConfigs[sourceChain];\n\n  if (!account) {\n    return null;\n  }\n\n  const toDerive = {\n    SS58Format,\n    address: account.address,\n    bridgeId\n  };\n  return getDerivedAccount(toDerive);\n};\n\nexport default useDerivedAccount;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport type { KeyringPair } from '@polkadot/keyring/types';\nimport { useEffect, useState } from 'react';\n\nimport { AccountActionCreators } from '../actions/accountActions';\nimport { useUpdateAccountContext } from '../contexts/AccountContextProvider';\nimport { useAccountContext } from '../contexts/AccountContextProvider';\nimport { useKeyringContext } from '../contexts/KeyringContextProvider';\nimport useDerivedAccount from '../hooks/useDerivedAccount';\ninterface Accounts {\n  account: KeyringPair | null;\n  accounts: Array<KeyringPair> | [];\n  derivedAccount: string | null;\n  setCurrentAccount: (value: string) => void;\n}\n\nconst useAccounts = (): Accounts => {\n  const { keyringPairs, keyringPairsReady } = useKeyringContext();\n  const [accounts, setAccounts] = useState<Array<KeyringPair> | []>([]);\n  const { dispatchAccount } = useUpdateAccountContext();\n  const derivedAccount = useDerivedAccount();\n  const { account } = useAccountContext();\n\n  useEffect(() => {\n    if (keyringPairsReady && keyringPairs.length) {\n      setAccounts(keyringPairs);\n    }\n  }, [keyringPairsReady, keyringPairs, setAccounts]);\n\n  const setCurrentAccount = (value: string) => {\n    const account = accounts.find(({ address }) => address === value);\n    if (account) {\n      dispatchAccount(AccountActionCreators.setAccount(account));\n    }\n  };\n\n  return {\n    account,\n    accounts,\n    derivedAccount,\n    setCurrentAccount\n  };\n};\n\nexport default useAccounts;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport type { KeyringPair } from '@polkadot/keyring/types';\nimport React from 'react';\nimport { Container, Dropdown } from 'semantic-ui-react';\nimport styled from 'styled-components';\n\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport useAccounts from '../hooks/useAccounts';\n\ninterface Props {\n  className?: string;\n}\n\nconst formatOptions = (accounts: Array<KeyringPair>) =>\n  accounts.map(({ meta, address }) => ({\n    icon: 'user',\n    key: address,\n    text: (meta.name as string).toLocaleUpperCase(),\n    value: address\n  }));\n\nconst Accounts = ({ className }: Props) => {\n  const { account, accounts, derivedAccount, setCurrentAccount } = useAccounts();\n  const { sourceChain, targetChain } = useSourceTarget();\n\n  const value = account?.address || '';\n\n  const onChange = (evt: any, { value }: any) => {\n    setCurrentAccount(value);\n  };\n\n  return (\n    <Container className={className}>\n      <p>{sourceChain}</p>\n      <Dropdown\n        value={value}\n        onChange={onChange}\n        placeholder=\"Select Account\"\n        fluid\n        selection\n        options={formatOptions(accounts)}\n      />\n      <p>{derivedAccount && `Derived account on ${targetChain}: ${derivedAccount}`}</p>\n    </Container>\n  );\n};\n\nexport default styled(Accounts)``;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ApiPromise } from '@polkadot/api';\nimport { useEffect, useState } from 'react';\n\nimport logger from '../util/logger';\n\ninterface Props {\n  chain: string;\n  api: ApiPromise;\n  isApiReady: boolean;\n}\n\nconst useBlocksInfo = ({ isApiReady, api, chain }: Props) => {\n  const [bestBlock, setBestBlock] = useState('');\n  const [bestBlockFinalized, setBestBlockFinalized] = useState('');\n\n  useEffect(() => {\n    if (!api || !isApiReady || !chain) {\n      setBestBlock('');\n      setBestBlockFinalized('');\n      return;\n    }\n\n    let unsubscribeBestNumber: () => void;\n    api.derive.chain\n      .bestNumber((res) => {\n        setBestBlock(res.toString());\n      })\n      .then((unsub) => {\n        unsubscribeBestNumber = unsub;\n      })\n      .catch((e) => logger.error('error reading blocks', e));\n\n    let unsubscribeBestNumberFinalized: () => void;\n    api.derive.chain\n      .bestNumberFinalized((res) => {\n        setBestBlockFinalized(res.toString());\n      })\n      .then((unsub) => {\n        unsubscribeBestNumberFinalized = unsub;\n      })\n      .catch((e) => logger.error('error reading blocks', e));\n\n    return function cleanup() {\n      unsubscribeBestNumberFinalized && unsubscribeBestNumberFinalized();\n      unsubscribeBestNumber && unsubscribeBestNumber();\n    };\n  }, [api, isApiReady, chain]);\n\n  return { bestBlock, bestBlockFinalized };\n};\n\nexport default useBlocksInfo;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nexport default function getPalletNames(chain: string) {\n  const bridgedGrandpaChain = `bridge${chain}Grandpa`;\n  const bridgedMessages = `bridge${chain}Messages`;\n  return {\n    bridgedGrandpaChain,\n    bridgedMessages\n  };\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ApiPromise } from '@polkadot/api';\nimport { Hash } from '@polkadot/types/interfaces';\nimport { Codec } from '@polkadot/types/types';\nimport BN from 'bn.js';\nimport { useEffect, useState } from 'react';\n\nimport getPalletNames from '../util/getPalletNames';\ninterface HeaderId {\n  number: BN;\n  hash: Hash;\n}\n\ntype CodecHeaderId = Codec & HeaderId;\n// type CodecBestBloc = Codec & [HeaderId, any]\n\ninterface Props {\n  chain: string;\n  api: ApiPromise;\n  isApiReady: boolean;\n}\n\nconst useBridgedBlocks = ({ isApiReady, api, chain }: Props) => {\n  const [importedHeaders, setImportedHeaders] = useState('');\n\n  const { bridgedGrandpaChain } = getPalletNames(chain);\n  useEffect(() => {\n    if (!api || !isApiReady || !chain) {\n      return;\n    }\n\n    let unsubBestFinalized: () => void;\n    let unsubImportedHeaders: () => void;\n\n    api.query[bridgedGrandpaChain]\n      .bestFinalized((res: CodecHeaderId) => {\n        const bestBridgedFinalizedBlock = res.toString();\n        api.query[bridgedGrandpaChain]\n          .importedHeaders(bestBridgedFinalizedBlock, (res: any) => {\n            if (res.toJSON()) {\n              setImportedHeaders(res.toJSON().number);\n            }\n          })\n          .then((unsub) => {\n            unsubImportedHeaders = unsub;\n          });\n      })\n      .then((unsub) => {\n        unsubBestFinalized = unsub;\n      });\n\n    return function cleanup() {\n      unsubImportedHeaders && unsubImportedHeaders();\n      unsubBestFinalized && unsubBestFinalized();\n    };\n  }, [isApiReady, chain, api, bridgedGrandpaChain]);\n\n  return { importedHeaders };\n};\n\nexport default useBridgedBlocks;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { ApiPromise } from '@polkadot/api';\nimport { useEffect, useState } from 'react';\n\nimport useLaneId from '../hooks/useLaneId';\nimport getPalletNames from '../util/getPalletNames';\ninterface Props {\n  chain: string;\n  api: ApiPromise;\n  isApiReady: boolean;\n}\n\ninterface Output {\n  inboundLanes: {\n    bridgeReceivedMessages: number;\n  };\n  outboundLanes: {\n    pendingMessages: number;\n    totalMessages: number;\n  };\n}\n\nconst useMessageLane = ({ isApiReady, api, chain }: Props): Output => {\n  const [outboundLanes, setOutboudLanes] = useState({ pendingMessages: 0, totalMessages: 0 });\n  const [inboundLanes, setInboudLanes] = useState({ bridgeReceivedMessages: 0 });\n  const laneId = useLaneId();\n  const { bridgedMessages } = getPalletNames(chain);\n  useEffect(() => {\n    if (!api || !isApiReady || !api.query[bridgedMessages] || !chain) {\n      return;\n    }\n\n    // to-do: review after depending on action to perform\n    let unsubscribeOutboundLanes: () => void;\n    let unsubscribeInboundLanes: () => void;\n    api.query[bridgedMessages]\n      .outboundLanes(laneId, (res: any) => {\n        const latest_generated_nonce = res.get('latest_generated_nonce').toNumber();\n        const latest_received_nonce = res.get('latest_received_nonce').toNumber();\n        const pendingMessages = latest_generated_nonce - latest_received_nonce;\n        setOutboudLanes({\n          pendingMessages: pendingMessages < 0 ? 0 : pendingMessages,\n          totalMessages: latest_generated_nonce\n        });\n      })\n      .then((unsub) => {\n        unsubscribeOutboundLanes = unsub;\n      });\n\n    api.query[bridgedMessages]\n      .inboundLanes(laneId, (res: any) => {\n        setInboudLanes({ bridgeReceivedMessages: res.get('last_confirmed_nonce').toNumber() });\n      })\n      .then((unsub) => {\n        unsubscribeInboundLanes = unsub;\n      });\n\n    return function cleanup() {\n      unsubscribeOutboundLanes && unsubscribeOutboundLanes();\n      unsubscribeInboundLanes && unsubscribeInboundLanes();\n    };\n  }, [api, isApiReady, chain, bridgedMessages, laneId]);\n\n  useEffect(() => {\n    if (!isApiReady) {\n      setOutboudLanes({ pendingMessages: 0, totalMessages: 0 });\n      setInboudLanes({ bridgeReceivedMessages: 0 });\n    }\n  }, [isApiReady]);\n\n  return { inboundLanes, outboundLanes };\n};\n\nexport default useMessageLane;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nexport default function useLaneId(): string {\n  const laneId = process.env.REACT_APP_LANE_ID || '0x00000000';\n  // To complete with configuration logic once we will have different lane ids\n  return laneId;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport useBlocksInfo from './useBlocksInfo';\nimport useBridgedBlocks from './useBridgedBlocks';\nimport useMessagesLane from './useMessagesLane';\n\ninterface Props {\n  local: string;\n  destination: string;\n  useApiContext: Function;\n}\n\nconst useDashboard = ({ destination, local, useApiContext }: Props) => {\n  const { isApiReady, api } = useApiContext();\n\n  const blockInfo = useBlocksInfo({ api, chain: local, isApiReady });\n  const bridgedBlocks = useBridgedBlocks({ api, chain: destination, isApiReady });\n  const messagesLane = useMessagesLane({ api, chain: destination, isApiReady });\n\n  return { ...blockInfo, ...bridgedBlocks, ...messagesLane };\n};\n\nexport default useDashboard;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\nimport { Card, Container } from 'semantic-ui-react';\nimport styled from 'styled-components';\n\nimport { SOURCE } from '../constants';\nimport useDashboard from '../hooks/useDashboard';\nimport useDashboardProfile from '../hooks/useDashboardProfile';\nimport { ChainTypes } from '../types/sourceTargetTypes';\n\ninterface Props {\n  chainType: ChainTypes;\n  useApiContext: Function;\n  className?: string;\n}\n\nconst DashboardCard = ({ chainType, useApiContext, className }: Props) => {\n  const { destination, local } = useDashboardProfile(chainType);\n  const {\n    bestBlockFinalized,\n    bestBlock,\n    importedHeaders: bestBridgedFinalizedBlock,\n    outboundLanes: { totalMessages, pendingMessages },\n    inboundLanes: { bridgeReceivedMessages }\n  } = useDashboard({ destination, local, useApiContext });\n\n  const headerText = chainType === SOURCE ? 'Source' : 'Target';\n  return (\n    <Container className={className}>\n      <Card className=\"container\">\n        <Card.Content header={`${headerText}: ${local}`} />\n        <Card.Description className=\"description\">\n          <div>Best Block: {bestBlock}</div>\n          <div>Best Finalized block: {bestBlockFinalized}</div>\n\n          <div>Pending Messages: {pendingMessages}</div>\n          <div>Total Messages: {totalMessages}</div>\n\n          <hr className=\"divider\" />\n          <div>Best Target Finalized block: {bestBridgedFinalizedBlock}</div>\n          <div>Received Messages: {bridgeReceivedMessages}</div>\n        </Card.Description>\n      </Card>\n    </Container>\n  );\n};\nexport default styled(DashboardCard)`\n  word-wrap: break-word;\n  .divider {\n    max-width: 80%;\n  }\n  .description {\n    margin: 10px;\n  }\n`;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useEffect, useState } from 'react';\n\nimport { TARGET } from '../constants';\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport { ChainTypes } from '../types/sourceTargetTypes';\n\ninterface Output {\n  local: string;\n  destination: string;\n}\n\nexport default function useDashboardProfile(chainType: ChainTypes): Output {\n  const { sourceChain, targetChain } = useSourceTarget();\n\n  const [profile, setProfile] = useState({ destination: '', local: '' });\n\n  useEffect(() => {\n    let local = sourceChain;\n    let destination = targetChain;\n    if (chainType === TARGET) {\n      local = targetChain;\n      destination = sourceChain;\n    }\n    setProfile({ destination, local });\n  }, [chainType, sourceChain, targetChain]);\n\n  return profile;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useEffect, useState } from 'react';\n\nimport { useApiSourcePromiseContext } from '../contexts/ApiPromiseSourceContext';\nimport { useApiTargetPromiseContext } from '../contexts/ApiPromiseTargetContext';\n\nexport default function useLoadingApi(): boolean {\n  const { isApiReady: isSourceApiReady } = useApiSourcePromiseContext();\n  const { isApiReady: isTargetApiReady } = useApiTargetPromiseContext();\n\n  const [areReady, setAreReady] = useState(false);\n\n  useEffect(() => {\n    setAreReady(isSourceApiReady && isTargetApiReady);\n  }, [isSourceApiReady, isTargetApiReady]);\n\n  return areReady;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { TransactionActionTypes } from '../actions/transactionActions';\n\nexport interface TransactionContextType {\n  estimatedFee: string | null;\n  receiverAddress: string | null;\n}\n\ninterface Payload {\n  [propName: string]: string;\n}\n\nexport interface TransactionState {\n  estimatedFee: string | null;\n  receiverAddress: string | null;\n}\n\nexport type TransactionsActionType = { type: TransactionActionTypes; payload: Payload };\n\nexport enum TransactionTypes {\n  TRANSFER = 'TRANSFER',\n  REMARK = 'REMARK'\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\nimport { Codec } from '@polkadot/types/types';\nimport { u8aToHex } from '@polkadot/util';\nimport { useEffect, useState } from 'react';\n\nimport { TransactionActionCreators } from '../actions/transactionActions';\nimport { ESTIMATED_FEE_RUNTIME_API_CALL } from '../constants';\nimport { useAccountContext } from '../contexts/AccountContextProvider';\nimport { useApiSourcePromiseContext } from '../contexts/ApiPromiseSourceContext';\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport { useUpdateTransactionContext } from '../contexts/TransactionContext';\nimport useLaneId from '../hooks/useLaneId';\nimport useLoadingApi from '../hooks/useLoadingApi';\nimport useTransactionType from '../hooks/useTransactionType';\n\ninterface Props {\n  input: string;\n  type: string;\n}\n\ninterface FeeAndPayload {\n  payload: any;\n}\n\nexport default function useTransactionPreparation({ input, type }: Props): FeeAndPayload {\n  const areApiReady = useLoadingApi();\n  const { api: sourceApi } = useApiSourcePromiseContext();\n\n  const laneId = useLaneId();\n  const { targetChain } = useSourceTarget();\n  const { account } = useAccountContext();\n\n  const [payload, setPayload] = useState<null | {}>(null);\n  const { callFunction, infoFunction } = useTransactionType({ input, type });\n\n  const { dispatchTransaction } = useUpdateTransactionContext();\n\n  useEffect(() => {\n    const calculateFee = async () => {\n      // Ignoring custom types missed for TS for now.\n      // Need to apply: https://polkadot.js.org/docs/api/start/typescript.user\n      // @ts-ignore\n      const payloadType = sourceApi.registry.createType('OutboundPayload', payload);\n      // @ts-ignore\n      const messageFeeType = sourceApi.registry.createType('MessageFeeData', {\n        lane_id: laneId,\n        payload: u8aToHex(payloadType.toU8a())\n      });\n\n      const estimatedFeeCall = await sourceApi.rpc.state.call<Codec>(\n        `To${targetChain}${ESTIMATED_FEE_RUNTIME_API_CALL}`,\n        u8aToHex(messageFeeType.toU8a())\n      );\n\n      // @ts-ignore\n      const estimatedFeeType = sourceApi.registry.createType('Option<Balance>', estimatedFeeCall);\n      const estimatedFee = estimatedFeeType.toString();\n      dispatchTransaction(TransactionActionCreators.estimateFee(estimatedFee));\n    };\n\n    if (areApiReady && payload) {\n      calculateFee();\n    }\n  }, [areApiReady, dispatchTransaction, laneId, payload, sourceApi.registry, sourceApi.rpc.state, targetChain]);\n\n  useEffect(() => {\n    const getPayload = async () => {\n      if (account && infoFunction && callFunction) {\n        const transferInfo = await infoFunction();\n        const weight = transferInfo.weight.toNumber();\n        const transferCall = await callFunction();\n        const call = transferCall.toU8a();\n        const payload = {\n          call,\n          origin: {\n            SourceAccount: account.addressRaw\n          },\n          spec_version: 1,\n          weight\n        };\n        setPayload(payload);\n      }\n    };\n\n    getPayload();\n  }, [account, callFunction, infoFunction]);\n\n  return {\n    payload\n  };\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { useEffect, useState } from 'react';\n\nimport { useAccountContext } from '../contexts/AccountContextProvider';\nimport { useApiSourcePromiseContext } from '../contexts/ApiPromiseSourceContext';\nimport { useApiTargetPromiseContext } from '../contexts/ApiPromiseTargetContext';\nimport { useTransactionContext } from '../contexts/TransactionContext';\nimport useLoadingApi from '../hooks/useLoadingApi';\nimport { TransactionTypes } from '../types/transactionTypes';\ninterface TransactionFunction {\n  callFunction: Function | null;\n  infoFunction: Function | null;\n}\n\ninterface Props {\n  input: string;\n  type: string;\n}\n\nexport default function useTransactionType({ input, type }: Props): TransactionFunction {\n  const areApiReady = useLoadingApi();\n  const { api: sourceApi } = useApiSourcePromiseContext();\n  const { api: targetApi } = useApiTargetPromiseContext();\n  const { account } = useAccountContext();\n  const { receiverAddress } = useTransactionContext();\n\n  const [transactionFunction, setTransactionFunction] = useState<TransactionFunction>({\n    callFunction: null,\n    infoFunction: null\n  });\n\n  useEffect(() => {\n    if (areApiReady) {\n      let callFunction = null;\n      let infoFunction = null;\n      if (account) {\n        switch (type) {\n          case TransactionTypes.REMARK:\n            callFunction = () => targetApi.tx.system.remark(input);\n            infoFunction = () => sourceApi.tx.system.remark(input).paymentInfo(account);\n            break;\n          case TransactionTypes.TRANSFER:\n            if (receiverAddress) {\n              callFunction = () => targetApi.tx.balances.transfer(receiverAddress, input);\n              infoFunction = () => sourceApi.tx.balances.transfer(receiverAddress, input).paymentInfo(account);\n            }\n            break;\n          default:\n            throw new Error(`Unknown type: ${type}`);\n        }\n        setTransactionFunction({ callFunction, infoFunction });\n      }\n    }\n  }, [account, areApiReady, input, receiverAddress, sourceApi, targetApi, type]);\n\n  return transactionFunction;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { SignerOptions } from '@polkadot/api/types';\nimport { web3FromSource } from '@polkadot/extension-dapp';\nimport type { KeyringPair } from '@polkadot/keyring/types';\n\nimport { useAccountContext } from '../contexts/AccountContextProvider';\nimport { useApiSourcePromiseContext } from '../contexts/ApiPromiseSourceContext';\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport { useTransactionContext } from '../contexts/TransactionContext';\nimport useLaneId from '../hooks/useLaneId';\nimport useTransactionPreparation from '../hooks/useTransactionPreparation';\nimport { TransactionTypes } from '../types/transactionTypes';\nimport logger from '../util/logger';\ninterface Message {\n  successfull: string;\n  error: string;\n}\ninterface Props {\n  isRunning: boolean;\n  setIsRunning: (status: boolean) => void;\n  setExecutionStatus: (message: string) => void;\n  message: Message;\n  input: string;\n  type: string;\n}\n\nfunction useSendMessage({ isRunning, setIsRunning, setExecutionStatus, message, input, type }: Props) {\n  const { api: sourceApi } = useApiSourcePromiseContext();\n  const { estimatedFee, receiverAddress } = useTransactionContext();\n  const laneId = useLaneId();\n  const { targetChain } = useSourceTarget();\n  const { account } = useAccountContext();\n  const { payload } = useTransactionPreparation({ input, type });\n\n  const sendLaneMessage = async () => {\n    try {\n      if (!account || isRunning) {\n        return;\n      }\n      setIsRunning(true);\n\n      const bridgeMessage = sourceApi.tx[`bridge${targetChain}Messages`].sendMessage(laneId, payload, estimatedFee);\n      const options: Partial<SignerOptions> = {\n        nonce: -1\n      };\n      let sourceAccount: string | KeyringPair = account;\n      if (account.meta.isInjected) {\n        const injector = await web3FromSource(account.meta.source as string);\n        options.signer = injector.signer;\n        sourceAccount = account.address;\n      }\n      await bridgeMessage.signAndSend(sourceAccount, { ...options });\n      setExecutionStatus(message.successfull);\n    } catch (e) {\n      setExecutionStatus(message.error);\n      logger.error(e);\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  const isButtonDisabled = () => {\n    switch (type) {\n      case TransactionTypes.REMARK:\n        return isRunning || !account;\n        break;\n      case TransactionTypes.TRANSFER:\n        return isRunning || !receiverAddress || !account;\n        break;\n      default:\n        throw new Error(`Unknown type: ${type}`);\n    }\n  };\n\n  return { isButtonDisabled, sendLaneMessage };\n}\n\nexport default useSendMessage;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from 'react';\nimport { Button, Container, Input } from 'semantic-ui-react';\nimport styled from 'styled-components';\n\nimport { useTransactionContext } from '../contexts/TransactionContext';\nimport useLoadingApi from '../hooks/useLoadingApi';\nimport useSendMessage from '../hooks/useSendMessage';\nimport { TransactionTypes } from '../types/transactionTypes';\ninterface Props {\n  className?: string;\n}\n\nconst Remark = ({ className }: Props) => {\n  const [isRunning, setIsRunning] = useState(false);\n  const [remarkInput, setRemarkInput] = useState('0x');\n  const [executionStatus, setExecutionStatus] = useState('');\n  const areApiReady = useLoadingApi();\n  const { estimatedFee } = useTransactionContext();\n  const message = {\n    error: 'Error sending remark',\n    successfull: '- Remark was executed succesfully'\n  };\n  const { isButtonDisabled, sendLaneMessage } = useSendMessage({\n    input: remarkInput,\n    isRunning,\n    message,\n    setExecutionStatus,\n    setIsRunning,\n    type: TransactionTypes.REMARK\n  });\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setExecutionStatus('');\n    setRemarkInput(event.target.value);\n  };\n\n  if (!areApiReady) {\n    return null;\n  }\n\n  return (\n    <Container className={className}>\n      <Input onChange={onChange} value={remarkInput} />\n      <Button disabled={isButtonDisabled()} onClick={sendLaneMessage}>\n        Send Remark\n      </Button>\n      <p>{estimatedFee && `Estimated source Fee: ${estimatedFee}`}</p>\n      <div className=\"status\">\n        <p>{executionStatus !== '' && executionStatus}</p>\n      </div>\n    </Container>\n  );\n};\n\nexport default styled(Remark)`\n  display: flex !important;\n  justify-content: center !important;\n`;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\nimport { checkAddress } from '@polkadot/util-crypto';\n\nimport { getChainConfigs } from '../configs/substrateProviders';\nimport getDeriveAccount from './getDeriveAccount';\n\ninterface Props {\n  receiverAddress: string;\n  chain: string;\n}\nconst getReceiverAddress = ({ receiverAddress, chain }: Props) => {\n  const chainsConfigs = getChainConfigs();\n  const { SS58Format, bridgeId } = chainsConfigs[chain];\n  try {\n    const [validatedDerivedAcccount] = checkAddress(receiverAddress, SS58Format);\n    let address = receiverAddress;\n    if (!validatedDerivedAcccount) {\n      const formattedAccount = getDeriveAccount({\n        SS58Format,\n        address: receiverAddress,\n        bridgeId\n      });\n\n      address = formattedAccount;\n    }\n    return address;\n  } catch (e) {\n    throw new Error('INCORRECT-FORMAT');\n  }\n};\n\nexport default getReceiverAddress;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from 'react';\nimport { Button, Container, Grid, Input } from 'semantic-ui-react';\nimport styled from 'styled-components';\n\nimport { useTransactionContext } from '../contexts/TransactionContext';\nimport useConnectedReceiver from '../hooks/useConnectedReceiver';\nimport useLoadingApi from '../hooks/useLoadingApi';\nimport useSendMessage from '../hooks/useSendMessage';\nimport { TransactionTypes } from '../types/transactionTypes';\n\ninterface Props {\n  className?: string;\n}\n\nconst Transfer = ({ className }: Props) => {\n  const [isRunning, setIsRunning] = useState(false);\n  const [transferInput, setTransferInput] = useState('0');\n  const [receiverInput, setReceiverInput] = useState('');\n\n  const [receiverMessage, setReceiverMessage] = useState<string | null>();\n  const [executionStatus, setExecutionStatus] = useState('');\n  const setConnectedReceiver = useConnectedReceiver();\n  const areApiReady = useLoadingApi();\n\n  const { estimatedFee, receiverAddress } = useTransactionContext();\n  const message = {\n    error: 'Error sending transfer',\n    successfull: 'Transfer was executed succesfully'\n  };\n  const { isButtonDisabled, sendLaneMessage } = useSendMessage({\n    input: transferInput,\n    isRunning,\n    message,\n    setExecutionStatus,\n    setIsRunning,\n    type: TransactionTypes.TRANSFER\n  });\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setExecutionStatus('');\n    setTransferInput(event.target.value);\n  };\n\n  const onReceiverChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const receiver = event.target.value;\n    setReceiverInput(receiver);\n    setConnectedReceiver({\n      receiver,\n      setReceiverMessage\n    });\n  };\n\n  if (!areApiReady) {\n    return null;\n  }\n\n  return (\n    <Container className={className}>\n      <Grid.Row>\n        <Grid.Column>\n          <label>Receiver</label>\n          <Input fluid onChange={onReceiverChange} value={receiverInput} />\n          <p>{receiverMessage && `${receiverMessage}`}</p>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Column>\n          <label>Sender</label>\n          <Input onChange={onChange} value={transferInput} />\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Column>\n          <Button disabled={isButtonDisabled()} onClick={sendLaneMessage}>\n            Send Transfer\n          </Button>\n          <p>{receiverAddress && estimatedFee && `Estimated source Fee: ${estimatedFee}`}</p>\n        </Grid.Column>\n      </Grid.Row>\n      <div className=\"status\">\n        <p>{executionStatus !== '' && executionStatus}</p>\n      </div>\n    </Container>\n  );\n};\n\nexport default styled(Transfer)``;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { TransactionActionCreators } from '../actions/transactionActions';\nimport { useSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport { useUpdateTransactionContext } from '../contexts/TransactionContext';\nimport getReceiverAddress from '../util/getReceiverAddress';\nimport logger from '../util/logger';\n\ninterface Props {\n  setReceiverMessage: (message: string) => void;\n  receiver: string;\n}\n\nexport default function useConnectedReceiver(): Function {\n  const { dispatchTransaction } = useUpdateTransactionContext();\n  const { targetChain } = useSourceTarget();\n\n  const setConnectedReceiver = ({ setReceiverMessage, receiver }: Props) => {\n    setReceiverMessage('');\n    try {\n      const receiverAddress = getReceiverAddress({ chain: targetChain, receiverAddress: receiver });\n      if (receiverAddress !== receiver) {\n        setReceiverMessage(`The format for the account is incorrect, funds will be sent to ${receiverAddress}`);\n      }\n      dispatchTransaction(TransactionActionCreators.setReceiverAddress(receiverAddress));\n    } catch (e) {\n      logger.error(e);\n      if (e.message === 'INCORRECT-FORMAT') {\n        setReceiverMessage('Invalid address, please provide a valid address');\n      }\n    }\n  };\n\n  return setConnectedReceiver;\n}\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\nimport { Container, Grid } from 'semantic-ui-react';\nimport { Button, Dimmer, Icon, Loader } from 'semantic-ui-react';\nimport styled from 'styled-components';\n\nimport { SourceTargetActionsCreators } from '../actions/sourceTargetActions';\nimport Accounts from '../components/Accounts';\nimport DashboardCard from '../components/DashboardCard';\nimport Remark from '../components/Remark';\nimport Transfer from '../components/Transfer';\nimport { SOURCE, TARGET } from '../constants';\nimport { useApiSourcePromiseContext } from '../contexts/ApiPromiseSourceContext';\nimport { useApiTargetPromiseContext } from '../contexts/ApiPromiseTargetContext';\nimport { useSourceTarget, useUpdateSourceTarget } from '../contexts/SourceTargetContextProvider';\nimport useLoadingApi from '../hooks/useLoadingApi';\n\ninterface Props {\n  className?: string;\n}\n\nexport function Main({ className }: Props) {\n  const areApiLoading = useLoadingApi();\n  const { sourceChain, targetChain } = useSourceTarget();\n\n  const { dispatchChangeSourceTarget } = useUpdateSourceTarget();\n  const onChangeSourceTarget = () => dispatchChangeSourceTarget(SourceTargetActionsCreators.switchChains());\n\n  if (!areApiLoading) {\n    return (\n      <Dimmer active>\n        <Loader />\n      </Dimmer>\n    );\n  }\n\n  return (\n    <>\n      <Container className={className}>\n        <Grid>\n          <Grid.Row>\n            <Grid.Column width={5}>{`${sourceChain} => ${targetChain}`}</Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={1} />\n            <Grid.Column width={5}>\n              <DashboardCard chainType={SOURCE} useApiContext={useApiSourcePromiseContext} />\n            </Grid.Column>\n            <Grid.Column width={1}>\n              <div className=\"switchButton\">\n                <Button disabled={!areApiLoading} onClick={onChangeSourceTarget}>\n                  <Icon fitted name=\"exchange\" />\n                </Button>\n              </div>\n            </Grid.Column>\n            <Grid.Column width={5}>\n              <DashboardCard chainType={TARGET} useApiContext={useApiTargetPromiseContext} />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={12}>\n              <Accounts />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={12}>\n              <Remark />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={12}>\n              <Transfer />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default styled(Main)`\n  .switchButton {\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n`;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport TopBar from './components/TopBar';\nimport { AccountContextProvider } from './contexts/AccountContextProvider';\nimport { ApiPromiseSourceContextProvider } from './contexts/ApiPromiseSourceContext';\nimport { ApiPromiseTargetContextProvider } from './contexts/ApiPromiseTargetContext';\nimport { KeyringContextProvider } from './contexts/KeyringContextProvider';\nimport { SourceTargetContextProvider } from './contexts/SourceTargetContextProvider';\nimport { TransactionContextProvider } from './contexts/TransactionContext';\nimport Main from './screens/Main';\n\nfunction App() {\n  return (\n    <SourceTargetContextProvider>\n      <ApiPromiseSourceContextProvider>\n        <ApiPromiseTargetContextProvider>\n          <KeyringContextProvider>\n            <AccountContextProvider>\n              <TransactionContextProvider>\n                <BrowserRouter>\n                  <Switch>\n                    <Route path={'/'}>\n                      <TopBar />\n                      <Main />\n                    </Route>\n                  </Switch>\n                </BrowserRouter>\n              </TransactionContextProvider>\n            </AccountContextProvider>\n          </KeyringContextProvider>\n        </ApiPromiseTargetContextProvider>\n      </ApiPromiseSourceContextProvider>\n    </SourceTargetContextProvider>\n  );\n}\n\nexport default App;\n","// Copyright 2021 Parity Technologies (UK) Ltd.\n// This file is part of Parity Bridges UI.\n//\n// Parity Bridges UI is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Parity Bridges UI is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Parity Bridges UI.  If not, see <http://www.gnu.org/licenses/>.\n\nimport './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport { checkExpectedVariables } from './util/envVariablesValidations';\n\ncheckExpectedVariables();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}